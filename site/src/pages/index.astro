---
import Layout from "../layouts/Layout.astro";
import OrbLayer from "../components/OrbLayer.astro";

// match these with the SCSS vars
const count = 3; // orbs per layer
const depth = 5; // layers
---

<style lang="scss" is:global>
  $count: 36; // orbs per layer
  $depth: 5; // layers

  $centre-width: 4vh; // largest orb size
  $width-factor: 0.4; // multiplier for the width on each iteration
  $distance-numerator: 20; // distance from parent is this divided by layer-value

  $duration-multiplier: 0; // this is multiplied by the layer-value as a timing offset
  $duration-default: 10; // default rotation time, added to the above

  $colour: rgb(255, 255, 255); // default colour
  $highlight-colour: rgb(255, 0, 247);
  $base-colour: rgb(0, 0, 0);

  $increment: calc(360 / $count);

  body {
    background-color: $base-colour;
  }

  div {
    aspect-ratio: 1;
    background-color: $colour;
    border-radius: 50%;
    position: absolute;
    display: grid;
    place-items: center;
  }

  $width: $centre-width;
  @for $h from 0 through ($depth + 1) {
    div.layer-#{$h} {
      width: $width;
    }
    $width: calc($width * $width-factor);
  }

  @mixin orbit($offset, $distance) {
    from {
      transform: rotate(#{$offset}deg) translateX(#{$distance}+ vh);
    }

    to {
      transform: rotate(calc(#{$offset}deg + 360deg))
        translateX(#{$distance}+ vh);
    }
  }

  @for $h from 1 through $depth + 1 {
    @for $i from 1 through $count {
      div.layer-#{$h}:nth-of-type(#{$i}) {
        animation: orbit-#{$h}-#{$i}
          #{($h * $duration-multiplier) +
          $duration-default}s
          linear
          infinite;
      }

      @keyframes orbit-#{$h}-#{$i} {
        @include orbit(calc($increment * $i), calc($distance-numerator / $h));
      }
    }
  }

  // #orb-12,
  // #orb-377 {
  //   background-color: $highlight-colour;
  //   z-index: 10;
  // }
</style>

<Layout title="CSS Tricks">
  <div class="layer-0">
    {(<OrbLayer orbs={count} depth={depth} />)}
  </div>
</Layout>
